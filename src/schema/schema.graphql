type Query {
    Universities: [University]
    Students: [Student]
    Cars: [Car]
    Spots: [Spot]
}

type Mutation {
    createUniversity(input: UniversityInput!): University
    createStudent(input: StudentInput!): Student
    createCar(input: CarInput!): Car
    createSpot(input: SpotInput!): Spot
    # deleteUser(_id: ID): User
    # updateUser(_id: ID, input: UserInput): User
}

type Student {
    _id: ID
    enrollNumber: String!
    name: String!
    lastnames: String!
    university: University!
    car: Car
    city: String!
    photo: String!
    password: String
    phone: String!
    raiting: Int!
    latitude: Float!
    longitude: Float!
    status: Int!
}

input StudentInput {
    enrollNumber: String!
    name: String!
    lastnames: String!
    university: ID!
    city: String!
    car: ID!
    password: String!
    phone: String!
    latitude: Float!
    longitude: Float!
}

type Car {
    _id: ID
    brand: String!
    model: String!
    license: String!
    color: String!
    year: Int
    spaceInCar: Int
    status: Int
    plates: String
}

input CarInput {
    brand: String!
    model: String!
    license: String!
    color: String!
    year: Int!
    spaceInCar: Int!
    status: Int!
    plates: String!
}

type University {
    _id: ID!
    acronym: String!
    name: String!
    latitude: Float!
    longitude: Float!
}

input UniversityInput {
    acronym: String!
    name: String!
    latitude: Float!
    longitude: Float!
}

type Spot {
    _id: ID!
    driver: Student!
    latitude: Float!
    longitude: Float!
    price: Float!
    hour: String!
    day: Int!
    status: Int!
}

input SpotInput {
    driver: String!
    latitude: Float!
    longitude: Float!
    price: Float!
    hour: String!
    day: Int!
}